from flask import Flask, request, jsonify
import redis
import requests
import numpy as np
import re

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
REDIS_HOST = "localhost"
REDIS_PORT = 6379
INDEX_NAME = "materials_idx"
MODEL = "mxbai-embed-large"
OLLAMA_URL = "http://localhost:11434/api/embeddings"

app = Flask(__name__)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis ===
r = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, decode_responses=False)


# === –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è embedding –æ—Ç Ollama ===
def get_embedding(text: str):
    payload = {"model": MODEL, "prompt": text}
    response = requests.post(OLLAMA_URL, json=payload)
    response.raise_for_status()
    data = response.json()
    return np.array(data["embedding"], dtype=np.float32)


# === –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ float32 ‚Üí bytes –¥–ª—è Redis ===
def to_bytes(v: np.ndarray) -> bytes:
    return v.astype(np.float32).tobytes()


# === –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ Redis ===
def create_index():
    try:
        r.ft(INDEX_NAME).info()
        print("‚úÖ –ò–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except redis.exceptions.ResponseError:
        print("üß± –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å...")
        from redis.commands.search.field import TextField, VectorField
        r.ft(INDEX_NAME).create_index([
            TextField("name"),
            VectorField(
                "embedding",
                "HNSW",
                {
                    "TYPE": "FLOAT32",
                    "DIM": 1024,
                    "DISTANCE_METRIC": "COSINE",
                    "M": 16,
                    "EF_CONSTRUCTION": 200
                }
            ),
        ])


# === –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ===
def search_materials_base(user_query: str, top_k=5):
    """–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        query_emb = get_embedding(user_query)

        from redis.commands.search.query import Query
        search_query = f"*=> [KNN {top_k} @embedding $vec AS score]"
        q = Query(search_query).sort_by("score").return_fields("name", "score").dialect(2)

        results = r.ft(INDEX_NAME).search(q, query_params={"vec": query_emb.tobytes()})

        if not results.docs:
            return []

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        formatted_results = []
        for doc in results.docs:
            name = getattr(doc, "name", None)
            if name is None:
                name = doc.__dict__.get("name", "")

            if isinstance(name, bytes):
                name = name.decode("utf-8")

            formatted_results.append({
                'name': name,
                'score': float(doc.score),
                'query_part': user_query  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
            })

        return formatted_results

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ '{user_query}': {str(e)}")
        return []


# === –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º ===
def search_materials_advanced(user_query: str, top_k=5):
    """
    –†–∞–∑–¥–µ–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ –∑–∞–ø—è—Ç—ã–º, '–∏–ª–∏', '–∏' –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
    –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    """
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏–ª–∏ —Å–ª–æ–≤–∞–º "–∏–ª–∏", "–∏" (—Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    search_parts = re.split(r',|\s+–∏–ª–∏\s+|\s+–∏\s+', user_query, flags=re.IGNORECASE)

    # –û—á–∏—â–∞–µ–º —á–∞—Å—Ç–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
    search_parts = [part.strip() for part in search_parts if part.strip()]

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ—Å—Ç–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —á–∞—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
    if len(search_parts) == 1:
        return search_materials_base(user_query, top_k)

    all_results = []

    print(f"üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ {len(search_parts)} —á–∞—Å—Ç—è–º –∑–∞–ø—Ä–æ—Å–∞:")
    for i, part in enumerate(search_parts, 1):
        print(f"  {i}. '{part}'")

        part_results = search_materials_base(part, top_k)
        all_results.extend(part_results)

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    unique_results = []
    seen_names = set()

    for result in all_results:
        if result["name"] not in seen_names:
            seen_names.add(result["name"])
            unique_results.append(result)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score (—á–µ–º –º–µ–Ω—å—à–µ - —Ç–µ–º –ª—É—á—à–µ)
    unique_results.sort(key=lambda x: x["score"])

    return unique_results


# === API –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ ===
@app.route('/save_materials', methods=['POST'])
def save_materials():
    try:
        data = request.get_json()

        if not data or 'materials' not in data:
            return jsonify({'error': 'No materials array provided'}), 400

        materials = data['materials']

        if not isinstance(materials, list):
            return jsonify({'error': 'Materials should be an array'}), 400

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        create_index()

        print(f"üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º {len(materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ Redis...")

        saved_count = 0
        for i, text in enumerate(materials):
            try:
                emb = get_embedding(text)
                key = f"material:{i}"
                r.hset(
                    key,
                    mapping={
                        "name": text,
                        "embedding": to_bytes(emb),
                    },
                )
                saved_count += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ {i}: {str(e)}")
                continue

        return jsonify({
            'status': 'success',
            'message': f'–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
            'saved_count': saved_count,
            'total_requested': len(materials)
        })

    except Exception as e:
        return jsonify({'error': str(e)}), 500


# === API –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ===
@app.route('/search_materials', methods=['POST'])
def search_materials():
    try:
        data = request.get_json()

        if not data or 'query' not in data:
            return jsonify({'error': 'No search query provided'}), 400

        user_query = data['query']
        top_k = data.get('top_k', 5)
        use_advanced_search = data.get('advanced_search', True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫

        if use_advanced_search:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º
            results = search_materials_advanced(user_query, top_k)
            search_type = "advanced"
            search_parts = re.split(r',|\s+–∏–ª–∏\s+|\s+–∏\s+', user_query, flags=re.IGNORECASE)
            search_parts = [part.strip() for part in search_parts if part.strip()]
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
            results = search_materials_base(user_query, top_k)
            search_type = "simple"
            search_parts = [user_query]

        if not results:
            return jsonify({
                'status': 'success',
                'query': user_query,
                'search_type': search_type,
                'search_parts': search_parts,
                'results': [],
                'message': '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            })

        return jsonify({
            'status': 'success',
            'query': user_query,
            'search_type': search_type,
            'search_parts': search_parts,
            'results': results,
            'count': len(results)
        })

    except Exception as e:
        return jsonify({'error': str(e)}), 500


# === Health check ===
@app.route('/health', methods=['GET'])
def health_check():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        r.ping()
        return jsonify({'status': 'healthy', 'redis': 'connected'})
    except Exception as e:
        return jsonify({'status': 'unhealthy', 'redis': str(e)}), 500


if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
    create_index()
    app.run(host='0.0.0.0', port=5000, debug=True)